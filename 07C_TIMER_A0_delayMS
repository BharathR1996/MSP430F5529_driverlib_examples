/*
 * 07C_TIMER_A0_delayMS: sets up a function delayms() that delays for the
 * number of milliseconds passed as an argument.  Used here to create a
 * one second heartbeat on the red LED.
 *
 * Set MCLK to 25.6 MHz
 * Set ACLK to XT1 (32,768 Hz)
 * Increment MILLI_COUNT in ISR when Timer A0 gets to 32 counts
 *   giving approximately 1 millisecond (1.006 on my oscilloscope)
 *
 * Frank Milburn 	2 September 2016
 * Developed on MSP-EXP430F5529 LaunchPad Rev1.5 on CCS V6.1, TIv16.6.0.STS
 */
#include "driverlib.h"

#define MCLK_FREQ_KHZ                25000
#define FLLREF_KHZ                   32
#define UCS_MCLK_FLLREF_RATIO        MCLK_FREQ_KHZ/FLLREF_KHZ

#define GREEN_LED                    GPIO_PORT_P4,GPIO_PIN7
#define RED_LED                      GPIO_PORT_P1,GPIO_PIN0
#define MILLI_COUNT                  32
#define HEARTBEAT_BLIP               100
#define HEARTBEAT_DURATION			 1000

void setupPMM(void);
void setupGPIO(void);
void setupUCS(void);
void startDelayMS(void);
void stopDelayMS(void);
void delayMS(unsigned long delayTime);

volatile unsigned int status;
volatile unsigned long millis = 0;

//--------------------------------  m a i n  -----------------------------------
void main(void)
{
    //Stop WDT
    WDT_A_hold(WDT_A_BASE);


    setupPMM();
    setupGPIO();
    setupUCS();
	startDelayMS();

    //Enter LPM0, enable interrupts
    __bis_SR_register(GIE);

    for(;;){
    	GPIO_toggleOutputOnPin(RED_LED);
    	delayMS(HEARTBEAT_BLIP);
    	GPIO_toggleOutputOnPin(RED_LED);
    	delayMS(HEARTBEAT_DURATION - HEARTBEAT_BLIP);
    }
}
//----------------------------  s e t u p P M M  -------------------------------
void setupPMM(void){
    // set VCore = 0 for 8 MHz and below
    //           = 1 for 12 MHz
    //           = 2 for 20 MHz
    //           = 3 for 25 MHz
    PMM_setVCore(PMM_CORE_LEVEL_3);
}
//---------------------------  s e t u p G P I O  ------------------------------
void setupGPIO(void){

    GPIO_setAsOutputPin(RED_LED);

    // Required for external crystal, XT1
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_P5,
        GPIO_PIN4 + GPIO_PIN5);                   // XT1 out on P5.5, XT1 in on P5.4
}
//----------------------------  s e t u p U C S  -------------------------------
void setupUCS(void){

    UCS_setExternalClockSource(32768,4000000);    // Frequency in Hz of XT1CLK and XT2CLK

    UCS_turnOnLFXT1(
        UCS_XT1_DRIVE_0,                          // max drive strength (3) for 25 MHz
        UCS_XCAP_3);

    UCS_initClockSignal(                          // use XT1CLK for ACLK (32768 Hz)
        UCS_ACLK,
        UCS_XT1CLK_SELECT,
        UCS_CLOCK_DIVIDER_1);

    UCS_initClockSignal(                          // set DCO FLL ref to DFOCLK (32768 Hz)
        UCS_FLLREF,
        UCS_DCOCLK_SELECT,
        UCS_CLOCK_DIVIDER_1);

    UCS_initClockSignal(                          // use DFOCLK for SMCLK
        UCS_SMCLK,
        UCS_DCOCLK_SELECT,
        UCS_CLOCK_DIVIDER_1);

    UCS_initFLLSettle(                            // set MCLK frequency and ratio
    	MCLK_FREQ_KHZ,
        UCS_MCLK_FLLREF_RATIO);

    // enable global oscillator fault flag
    SFR_clearInterrupt(SFR_OSCILLATOR_FAULT_INTERRUPT);
    SFR_enableInterrupt(SFR_OSCILLATOR_FAULT_INTERRUPT);
}
//-------------------------- s t a r t D e l a y M S ---------------------------
void startDelayMS(void){

    Timer_A_clearTimerInterrupt(TIMER_A0_BASE);

    Timer_A_initUpModeParam param = {0};
    	param.clockSource = TIMER_A_CLOCKSOURCE_ACLK;
    	param.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    	// count up to the following number (period)
    	param.timerPeriod = MILLI_COUNT;
    	param.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_DISABLE;
    	param.captureCompareInterruptEnable_CCR0_CCIE =
    			TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE;
    	param.timerClear = TIMER_A_DO_CLEAR;
    	param.startTimer = true;

    Timer_A_initUpMode(TIMER_A0_BASE, &param);
}
//-----------------------------  d e l a y M S  -------------------------------
void delayMS(unsigned long delayTime){
	millis = 0;
	while (millis < delayTime){}
}
//-----------------------------  N M I _ I S R  --------------------------------
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=UNMI_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(UNMI_VECTOR)))
#endif
void NMI_ISR(void)
{
    do
    {
        // trap and wait here until oscillator fault flags are cleared
        status = UCS_clearAllOscFlagsWithTimeout(1000);
    }
    while(status != 0);
}
//-------------------------  T I M E R A 0 _ I S R  ----------------------------
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=TIMER0_A0_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(TIMERA0_VECTOR)))
#endif
void TIMERA0_ISR(void)
{
    millis++;
}
/* This code contains fragments and sections subject to the following
 * copyright:
 *
 * --COPYRIGHT--,BSD
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

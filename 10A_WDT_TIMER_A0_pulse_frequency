/*
 * 10A_WDT_TIMER_A0_pulse_frequency: uses the milliSecs function developed
 * earlier to count pulses and determine the frequency of a signal
 * coming in on TA0.0 (P1.1).  The result is displayed on the console with
 * printf.
 *
 * MCLK and SMCLK running at approximately 24000/32 * 32768 = 24.576 MHz
 * ACLK uses Pin 1.0 as an external source
 * WDT uses SMCLK as source with clock divider of 8192 (~3000 Hz)
 *
 * Right click project --> Properties --> MSP430 Linker --> Basic Options
 * Increase the Heap size to 320 to use printf()
 *
 * Frank Milburn 	5 September 2016
 * Developed on MSP-EXP430F5529 LaunchPad Rev1.5 on CCS V6.1, TIv16.6.0.STS
 */

#include "driverlib.h"
#include <stdio.h>                               // to include printf()

#define MCLK_FREQ_KHZ                       24000
#define FLLREF_KHZ                          32
#define UCS_MCLK_FLLREF_RATIO   			MCLK_FREQ_KHZ/FLLREF_KHZ

void setupPMM();
void setupGPIO();
void setupUCS();
void setupWDT();
void setupTimerA0();
void startCounting();
void stopCounting();
unsigned long milliSecs();

volatile unsigned long oneThirdMillis = 0;   // counter - 1/3 of a millisecond

//--------------------------------  m a i n  -----------------------------------
void main(void)

{
    WDT_A_hold(WDT_A_BASE);

	setupPMM();
	setupGPIO();
	setupUCS();
	setupWDT();
	setupTimerA0();

    __bis_SR_register(GIE);

	for(;;){
		unsigned long window = 1000;                          // ms
		unsigned long endTime = milliSecs() + window;

		startCounting();
		while (milliSecs() < endTime){
			// do nothing
		}
		stopCounting();

		unsigned long counts = (long) Timer_A_getCounterValue(TIMER_A0_BASE);
		unsigned long freq = (1000 / window) * counts;

		printf("Counts    = %d \n",(int)counts);
		printf("Window    = %d ms\n",(int)window);
		printf("Frequency = %d Hz\n",(int)freq);
		printf("\n");
	}

}
//----------------------------  s e t u p P M M  -------------------------------
void setupPMM(void){
    // set VCore = 0 for 8 MHz and below
    //           = 1 for 12 MHz
    //           = 2 for 20 MHz
    //           = 3 for 25 MHz
    PMM_setVCore(PMM_CORE_LEVEL_3);
}
//---------------------------  s e t u p G P I O  ------------------------------
void setupGPIO(void){
	GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P1,GPIO_PIN0);
}
//----------------------------  s e t u p U C S  -------------------------------
void setupUCS(void){

    // Note that ACLK is coming in on P1.0 as set in GPIO

    UCS_initClockSignal(                     // set DCO FLL ref to DFOCLK
        UCS_FLLREF,
        UCS_DCOCLK_SELECT,
        UCS_CLOCK_DIVIDER_1);

    UCS_initClockSignal(                     // use DFOCLK for SMCLK
        UCS_SMCLK,
        UCS_DCOCLK_SELECT,
        UCS_CLOCK_DIVIDER_1);

    UCS_initFLLSettle(                       // set MCLK frequency and ratio
    	MCLK_FREQ_KHZ,
        UCS_MCLK_FLLREF_RATIO);
}
//------------------------  s e t u p T i m e r A 0  ---------------------------
void setupTimerA0(){
    Timer_A_initContinuousModeParam param = {0};
    	param.clockSource = TIMER_A_CLOCKSOURCE_EXTERNAL_TXCLK;
    	param.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    	param.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_DISABLE;
    	param.timerClear = TIMER_A_DO_CLEAR;
    	param.startTimer = true;

    Timer_A_initContinuousMode(TIMER_A0_BASE, &param);
}
//-----------------------  s t a r t C o u n t i n g  --------------------------
void startCounting(){
	Timer_A_clear(TIMER_A0_BASE);
	Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_CONTINUOUS_MODE);
}
//------------------------  s t o p C o u n t i n g  ---------------------------
void stopCounting(){
	Timer_A_stop(TIMER_A0_BASE);
}
//----------------------------  s e t u p W D T  -------------------------------
void setupWDT(void){
    WDT_A_initIntervalTimer(WDT_A_BASE,
                            WDT_A_CLOCKSOURCE_SMCLK,
                            WDT_A_CLOCKDIVIDER_8192);

    WDT_A_start(WDT_A_BASE);

    //Place WDT in timer interrupt mode
    SFR_clearInterrupt(SFR_WATCHDOG_INTERVAL_TIMER_INTERRUPT);
    SFR_enableInterrupt(SFR_WATCHDOG_INTERVAL_TIMER_INTERRUPT);
}
//---------------------------  m i l l i S e c s  ----------------------------
unsigned long milliSecs(){
	return oneThirdMillis / 3;               // return millis
}
//---------------------------  W D T _ A _ I S R  ----------------------------
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=WDT_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(WDT_VECTOR)))
#endif
void WDT_A_ISR(void)
{
    oneThirdMillis++;                        // count thirds of a millisecond
}
/* This code contains fragments and sections subject to the following
 * copyright:
 *
 * --COPYRIGHT--,BSD
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/
